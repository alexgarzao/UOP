/* ncurses.bind */

%module ncurses
%{
#include <ncurses.h>


extern "C" void uvm_os_wrap_libncurses_writeln(CDataStack& dataStack)
{
	int argNumber = dataStack.pop().getInteger();
	std::string out;

	for (int arg=0; arg < argNumber; arg++) {
		out = dataStack.pop().getText() + out;
	}
	printw("%s\n", out.c_str());
}


extern "C" void uvm_os_wrap_libncurses_wwriteln(CDataStack& dataStack)
{
	int argNumber = dataStack.pop().getInteger() - 1; // desconsidero window*
	std::string out;

	for (int arg=0; arg < argNumber; arg++) {
		out = dataStack.pop().getText() + out;
	}

	WINDOW* window = (WINDOW*) dataStack.pop().getPointer();
	wprintw(window, "%s\n", out.c_str());
}


extern "C" void uvm_os_wrap_libncurses_wwrite(CDataStack& dataStack)
{
	int argNumber = dataStack.pop().getInteger() - 1; // desconsidero window*
	std::string out;

	for (int arg=0; arg < argNumber; arg++) {
		out = dataStack.pop().getText() + out;
	}

	WINDOW* window = (WINDOW*) dataStack.pop().getPointer();
	wprintw(window, "%s", out.c_str());
}


extern "C" void uvm_os_wrap_libncurses_mvwriteln(CDataStack& dataStack)
{
	int argNumber = dataStack.pop().getInteger() - 2; // Nao considero row e col
	std::string out;

	for (int arg=0; arg < argNumber; arg++) {
		out = dataStack.pop().getText() + out;
	}

	int col = dataStack.pop().getInteger();
	int row = dataStack.pop().getInteger();
	mvprintw(row, col, "%s\n", out.c_str());
}


extern "C" void uvm_os_wrap_libncurses_mvwrite(CDataStack& dataStack)
{
	int argNumber = dataStack.pop().getInteger() - 2; // Nao considero row e col
	std::string out;

	for (int arg=0; arg < argNumber; arg++) {
		out = dataStack.pop().getText() + out;
	}

	int col = dataStack.pop().getInteger();
	int row = dataStack.pop().getInteger();
	mvprintw(row, col, "%s", out.c_str());
}


extern "C" void uvm_os_wrap_libncurses_mvwwrite(CDataStack& dataStack)
{
	int argNumber = dataStack.pop().getInteger() - 3; // Nao considero window, row e col
	std::string out;

	for (int arg=0; arg < argNumber; arg++) {
		out = dataStack.pop().getText() + out;
	}

	int col = dataStack.pop().getInteger();
	int row = dataStack.pop().getInteger();
	WINDOW* window = (WINDOW*) dataStack.pop().getPointer();
	mvwprintw(window, row, col, "%s", out.c_str());
}


extern "C" void uvm_os_wrap_libncurses_mvwwriteln(CDataStack& dataStack)
{
	int argNumber = dataStack.pop().getInteger() - 3; // Nao considero window, row e col
	std::string out;

	for (int arg=0; arg < argNumber; arg++) {
		out = dataStack.pop().getText() + out;
	}

	int col = dataStack.pop().getInteger();
	int row = dataStack.pop().getInteger();
	WINDOW* window = (WINDOW*) dataStack.pop().getPointer();
	mvwprintw(window, row, col, "%s\n", out.c_str());
}


extern "C" void uvm_os_wrap_libncurses_read(CDataStack& dataStack)
{
	char text[200];

	getnstr(text, sizeof(text));

	dataStack.push(std::string(text));
}


extern "C" void uvm_os_wrap_libncurses_wread(CDataStack& dataStack)
{
	char text[200];
	WINDOW* window = (WINDOW*) dataStack.pop().getPointer();

	wgetnstr(window, text, sizeof(text));

	dataStack.push(std::string(text));
}


%}

%linkerlibs = ncurses;

%typemap out NCURSES_ATTR_T = int;
%typemap out attr_t         = char;
%typemap out const attr_t   = const char;
%typemap out attr_t*        = char*;
%typemap out WINDOW*        = void*;
%typemap out const WINDOW*  = const void*;
%typemap out SCREEN*        = void*;
%typemap out FILE*          = void*;
%typemap out mmask_t        = int;
%typemap out mmask_t*       = int*; 
%typemap out MEVENT*        = void*; 
%typemap out chtype         = char; 
%typemap out const chtype   = const char; 
%typemap out chtype*        = char*; 
%typemap out const chtype*  = const char*; 

%typemap in  WINDOW*        = void*;
%typemap in  WINDOW         = int;
%typemap in  chtype*        = void*;
%typemap in  chtype         = int;
%typemap in  SCREEN*        = void*;
%typemap in  SCREEN         = int;
%typemap in  attr_t         = int;
%typemap in  mmask_t        = int;

int addch (const chtype);
int addchnstr (const chtype *, int);
int addchstr (const chtype *);

int addnstr (const char *, int);
int addstr (const char *);
int attroff (NCURSES_ATTR_T);

int attron (NCURSES_ATTR_T);
int attrset (NCURSES_ATTR_T);			
int attr_get (attr_t *, short *, void *);
int attr_off (attr_t, void *);			
int attr_on (attr_t, void *);			
int attr_set (attr_t, short, void *);		
int baudrate (void);				
int beep  (void);				
int bkgd (chtype);				
void bkgdset (chtype);				
int border (chtype,chtype,chtype,chtype,chtype,chtype,chtype,chtype);	
int box (WINDOW *, char, chtype);		
bool can_change_color (void);			
int cbreak (void);				
int chgat (int, attr_t, short, const void *);	
int clear (void);				
int clearok (WINDOW *,bool);			
int clrtobot (void);				
int clrtoeol (void);				
int color_content (short,short*,short*,short*);	
int color_set (short,void*);			
int COLOR_PAIR (int);				
int copywin (const WINDOW*,WINDOW*,int,int,int,int,int,int,int);	
int curs_set (int);				
int def_prog_mode (void);			
int def_shell_mode (void);			
int delay_output (int);				
int delch (void);				
void delscreen (SCREEN *);			
int delwin (WINDOW *);				
int deleteln (void);				
WINDOW * derwin (WINDOW *,int,int,int,int);	
int doupdate (void);				
WINDOW * dupwin (WINDOW *);			
int echo (void);					
int echochar (const chtype);			
int erase (void);				
int endwin (void);				
char erasechar (void);				
void filter (void);				
int flash (void);				
int flushinp (void);				
chtype getbkgd (WINDOW *);			
int getch (void);				
int getnstr (char *, int);			
int getstr (char *);				
WINDOW * getwin (FILE *);			
int halfdelay (int);				
bool has_colors (void);				
bool has_ic (void);				
bool has_il (void);				
int hline (chtype, int);				
void idcok (WINDOW *, bool);			
int idlok (WINDOW *, bool);			
void immedok (WINDOW *, bool);			
chtype inch (void);				
int inchnstr (chtype *, int);			
int inchstr (chtype *);				
WINDOW * initscr (void);				
int init_color (short,short,short,short);	
int init_pair (short,short,short);		
int innstr (char *, int);			
int insch (chtype);				
int insdelln (int);				
int insertln (void);				
int insnstr (const char *, int);			
int insstr (const char *);			
int instr (char *);				
int intrflush (WINDOW *,bool);			
bool isendwin (void);				
bool is_linetouched (WINDOW *,int);		
bool is_wintouched (WINDOW *);			
const char * keyname (int);		
int keypad (WINDOW *,bool);			
char killchar (void);				
int leaveok (WINDOW *,bool);			
char * longname (void);				
int meta (WINDOW *,bool);			
int move (int, int);				
int mvaddch (int, int, const chtype);		
int mvaddchnstr (int, int, const chtype *, int);	
int mvaddchstr (int, int, const chtype *);	
int mvaddnstr (int, int, const char *, int);	
int mvaddstr (int, int, const char *);		
int mvchgat (int, int, int, attr_t, short, const void *);	
int mvcur (int,int,int,int);			
int mvdelch (int, int);				
int mvderwin (WINDOW *, int, int);		
int mvgetch (int, int);				
int mvgetnstr (int, int, char *, int);		
int mvgetstr (int, int, char *);			
int mvhline (int, int, chtype, int);		
chtype mvinch (int, int);			
int mvinchnstr (int, int, chtype *, int);	
int mvinchstr (int, int, chtype *);		
int mvinnstr (int, int, char *, int);		
int mvinsch (int, int, chtype);			
int mvinsnstr (int, int, const char *, int);	
int mvinsstr (int, int, const char *);		
int mvinstr (int, int, char *);			
//int mvprintw (int,int, const char *,...);
//int mvscanw (int,int, const char *,...);	
int mvvline (int, int, chtype, int);		
int mvwaddch (WINDOW *, int, int, const chtype);	
int mvwaddchnstr (WINDOW *, int, int, const chtype *, int);
int mvwaddchstr (WINDOW *, int, int, const chtype *);	
int mvwaddnstr (WINDOW *, int, int, const char *, int);	
int mvwaddstr (WINDOW *, int, int, const char *);	
int mvwchgat (WINDOW *, int, int, int, attr_t, short, const void *);
int mvwdelch (WINDOW *, int, int);		
int mvwgetch (WINDOW *, int, int);		
int mvwgetnstr (WINDOW *, int, int, char *, int);	
int mvwgetstr (WINDOW *, int, int, char *);	
int mvwhline (WINDOW *, int, int, chtype, int);	
int mvwin (WINDOW *,int,int);			
chtype mvwinch (WINDOW *, int, int);			
int mvwinchnstr (WINDOW *, int, int, chtype *, int);	
int mvwinchstr (WINDOW *, int, int, chtype *);		
int mvwinnstr (WINDOW *, int, int, char *, int);		
int mvwinsch (WINDOW *, int, int, chtype);		
int mvwinsnstr (WINDOW *, int, int, const char *, int);	
int mvwinsstr (WINDOW *, int, int, const char *);		
int mvwinstr (WINDOW *, int, int, char *);		
//int mvwprintw (WINDOW*,int,int, const char *,...);
//int mvwscanw (WINDOW *,int,int, const char *,...);
int mvwvline (WINDOW *,int, int, chtype, int);	
int napms (int);					
WINDOW * newpad (int,int);				
SCREEN * newterm (const char *,FILE *,FILE *);	
WINDOW * newwin (int,int,int,int);			
int nl (void);					
int nocbreak (void);				
int nodelay (WINDOW *,bool);			
int noecho (void);				
int nonl (void);					
void noqiflush (void);				
int noraw (void);				
int notimeout (WINDOW *,bool);			
int overlay (const WINDOW*,WINDOW *);		
int overwrite (const WINDOW*,WINDOW *);		
int pair_content (short,short*,short*);		
int PAIR_NUMBER (int);				
int pechochar (WINDOW *, const chtype);		
int pnoutrefresh (WINDOW*,int,int,int,int,int,int);
int prefresh (WINDOW *,int,int,int,int,int,int);	
//int printw (const char *,...);
int putwin (WINDOW *, FILE *);			
void qiflush (void);				
int raw (void);					
int redrawwin (WINDOW *);			
int refresh (void);				
int resetty (void);				
int reset_prog_mode (void);			
int reset_shell_mode (void);			
//int ripoffline (int, int (*)(WINDOW *, int));	
int savetty (void);				
//int scanw (const char *,...);
int scr_dump (const char *);			
int scr_init (const char *);			
int scrl (int);					
int scroll (WINDOW *);				
int scrollok (WINDOW *,bool);			
int scr_restore (const char *);			
int scr_set (const char *);			
int setscrreg (int,int);				
SCREEN * set_term (SCREEN *);			
int slk_attroff (const chtype);			
int slk_attr_off (const attr_t, void *);
int slk_attron (const chtype);			
int slk_attr_on (attr_t,void*);	
int slk_attrset (const chtype);			
attr_t slk_attr (void);				
int slk_attr_set (const attr_t,short,void*);	
int slk_clear (void);				
int slk_color (short);				
int slk_init (int);				
char * slk_label (int);				
int slk_noutrefresh (void);			
int slk_refresh (void);				
int slk_restore (void);				
int slk_set (int,const char *,int);		
int slk_touch (void);				
int standout (void);				
int standend (void);				
int start_color (void);				
WINDOW * subpad (WINDOW *, int, int, int, int);	
WINDOW * subwin (WINDOW *, int, int, int, int);	
int syncok (WINDOW *, bool);			
chtype termattrs (void);				
char * termname (void);				
void timeout (int);				
int touchline (WINDOW *, int, int);		
int touchwin (WINDOW *);				
int typeahead (int);				
int ungetch (int);				
int untouchwin (WINDOW *);			
void use_env (bool);				
int vidattr (chtype);				
//int vidputs (chtype, int (*)(int));		
int vline (chtype, int);				
//int vwprintw (WINDOW *, const char *,va_list);	
//int vw_printw (WINDOW *, const char *,va_list);	
//int vwscanw (WINDOW *, const char *,va_list);	
//int vw_scanw (WINDOW *, const char *,va_list);	
int waddch (WINDOW *, const chtype);		
int waddchnstr (WINDOW *,const chtype *,int);	
int waddchstr (WINDOW *,const chtype *);		
int waddnstr (WINDOW *,const char *,int);	
int waddstr (WINDOW *,const char *);		
int wattron (WINDOW *, int);			
int wattroff (WINDOW *, int);			
int wattrset (WINDOW *, int);			
int wattr_get (WINDOW *, attr_t *, short *, void *);	
int wattr_on (WINDOW *, attr_t, void *);		
int wattr_off (WINDOW *, attr_t, void *);	
int wattr_set (WINDOW *, attr_t, short, void *);	
int wbkgd (WINDOW *, chtype);			
void wbkgdset (WINDOW *,chtype);			
int wborder (WINDOW *,chtype,chtype,chtype,chtype,chtype,chtype,chtype,chtype);	
int wchgat (WINDOW *, int, attr_t, short, const void *);
int wclear (WINDOW *);				
int wclrtobot (WINDOW *);			
int wclrtoeol (WINDOW *);			
int wcolor_set (WINDOW*,short,void*);		
void wcursyncup (WINDOW *);			
int wdelch (WINDOW *);				
int wdeleteln (WINDOW *);			
int wechochar (WINDOW *, const chtype);		
int werase (WINDOW *);				
int wgetch (WINDOW *);				
int wgetnstr (WINDOW *,char *,int);		
int wgetstr (WINDOW *, char *);			
int whline (WINDOW *, chtype, int);		
chtype winch (WINDOW *);				
int winchnstr (WINDOW *, chtype *, int);		
int winchstr (WINDOW *, chtype *);		
int winnstr (WINDOW *, char *, int);		
int winsch (WINDOW *, chtype);			
int winsdelln (WINDOW *,int);			
int winsertln (WINDOW *);			
int winsnstr (WINDOW *, const char *,int);	
int winsstr (WINDOW *, const char *);		
int winstr (WINDOW *, char *);			
int wmove (WINDOW *,int,int);			
int wnoutrefresh (WINDOW *);			
//int wprintw (WINDOW *, const char *,...);
int wredrawln (WINDOW *,int,int);		
int wrefresh (WINDOW *);				
//int wscanw (WINDOW *, const char *,...);
int wscrl (WINDOW *,int);			
int wsetscrreg (WINDOW *,int,int);		
int wstandout (WINDOW *);			
int wstandend (WINDOW *);			
void wsyncdown (WINDOW *);			
void wsyncup (WINDOW *);				
void wtimeout (WINDOW *,int);			
int wtouchln (WINDOW *,int,int,int);		
int wvline (WINDOW *,chtype,int);		

int tigetflag (const char *);		
int tigetnum (const char *);		
char * tigetstr (const char *);		
int putp (const char *);				

int getattrs (const WINDOW *);			
int getcurx (const WINDOW *);			
int getcury (const WINDOW *);			
int getbegx (const WINDOW *);			
int getbegy (const WINDOW *);			
int getmaxx (const WINDOW *);			
int getmaxy (const WINDOW *);			
int getparx (const WINDOW *);			
int getpary (const WINDOW *);			

WINDOW * wgetparent (const WINDOW *);	
bool is_cleared (const WINDOW *);	
bool is_idcok (const WINDOW *);		
bool is_idlok (const WINDOW *);		
bool is_immedok (const WINDOW *);	
bool is_keypad (const WINDOW *);		
bool is_leaveok (const WINDOW *);	
bool is_nodelay (const WINDOW *);	
bool is_notimeout (const WINDOW *);	
bool is_scrollok (const WINDOW *);	
bool is_syncok (const WINDOW *);		
int wgetscrreg (const WINDOW *, int *, int *); 

//int vsscanf(const char *, const char *, va_list);

int getmouse (MEVENT *);
int ungetmouse (MEVENT *);
mmask_t mousemask (mmask_t, mmask_t *);
bool wenclose (const WINDOW *, int, int);
int mouseinterval (int);
bool wmouse_trafo (const WINDOW*, int*, int*, bool);
bool mouse_trafo (int*, int*, bool);              



int mcprint (char *, int);
int has_key (int);
/*
*/

